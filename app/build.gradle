plugins {
//    id 'com.android.application'
//    id 'org.jetbrains.kotlin.android'
    alias(libs.plugins.com.android.application)
    alias(libs.plugins.org.jetbrains.kotlin.android)
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'com.google.gms.google-services'

    id 'com.google.devtools.ksp'
    id 'com.google.android.libraries.mapsplatform.secrets-gradle-plugin'
}

android {
    namespace 'com.blaze.classicbeat'
    compileSdk ProjectConfig.compileSdk

    defaultConfig {
        applicationId "com.blaze.classicbeat"
        minSdk ProjectConfig.minSdk
        targetSdk ProjectConfig.targetSdk
        versionCode ProjectConfig.versionCode
        versionName ProjectConfig.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }

        //map properties
        Properties properties = new Properties()
        if (rootProject.file("local.properties").exists()) {
            properties.load(
                    rootProject
                            .file("local.properties")
                            .newDataInputStream()
            )
        }

        buildConfigField("String", "MAPS_API_KEY", properties.getProperty("MAPS_API_KEY"))

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }
    buildFeatures {
        compose true
        buildConfig true
    }
    composeOptions {
        kotlinCompilerExtensionVersion ProjectConfig.compilerExtensionVersion
    }
    packaging {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

dependencies {
    implementation project(":core:ui")
    implementation project(":core:utils")
    implementation project(":feature:startup")
    implementation project(":feature:dashboard")
    implementation project(":feature:onboarding")

    implementation libs.core.ktx
    implementation libs.appcompat
    implementation libs.material
    implementation libs.lifecycle.runtime.ktx
    implementation libs.activity.compose
    implementation platform(libs.compose.bom)
    implementation libs.ui
    implementation libs.ui.graphics
    implementation libs.ui.tooling.preview
    implementation libs.material3
    implementation platform(libs.compose.bom)
//    implementation 'com.google.firebase:firebase-auth-ktx:22.1.2'
    testImplementation libs.junit
    androidTestImplementation libs.androidx.test.ext.junit
    androidTestImplementation libs.espresso.core

    androidTestImplementation platform(libs.compose.bom)
    androidTestImplementation libs.ui.test.junit4
    androidTestImplementation platform(libs.compose.bom)
    debugImplementation libs.ui.tooling
    debugImplementation libs.ui.test.manifest

    implementation libs.navigation.compose

    // Dagger Hilt
    implementation libs.hilt.android
    kapt libs.hilt.compiler
    implementation libs.hilt.navigation.compose

    //permission
    implementation libs.accompanist.permissions

    implementation libs.lazier
    implementation libs.work.runtime.ktx
    implementation libs.lifecycle.runtime.ktx

    implementation libs.systemuicontroller
    implementation libs.firebase.core

    implementation libs.maps.place

    implementation libs.kotlinx.coroutines.core
    implementation libs.kotlinx.coroutines.android
    implementation libs.kotlinx.coroutines.play.services


}